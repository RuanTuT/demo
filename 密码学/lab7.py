
import os
import re

# 初始置换IP表
ip = [57,49,41,33,25,17, 9,1,
      59,51,43,35,27,19,11,3,
      61,53,45,37,29,21,13,5,
      63,55,47,39,31,23,15,7,
      56,48,40,32,24,16, 8,0,
      58,50,42,34,26,18,10,2,
      60,52,44,36,28,20,12,4,
      62,54,46,38,30,22,14,6]

# 初始逆置换_IP表
_ip = [39,7,47,15,55,23,63,31,
       38,6,46,14,54,22,62,30,
       37,5,45,13,53,21,61,29,
       36,4,44,12,52,20,60,28,
       35,3,43,11,51,19,59,27,
       34,2,42,10,50,18,58,26,
       33,1,41, 9,49,17,57,25,
       32,0,40, 8,48,16,56,24]

# E-扩展运算表
E_table = [31, 0, 1, 2, 3, 4,
           3 , 4, 5, 6, 7, 8,
           7 , 8, 9,10,11,12,
           11,12,13,14,15,16,
           15,16,17,18,19,20,
           19,20,21,22,23,24,
           23,24,25,26,27,28,
           27,28,29,30,31, 0]

# S-盒
S_table = [[[14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7],
            [0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8],
            [4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0],
            [15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13]],#S1
           [[15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10],
            [3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5],
            [0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15],
            [13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9]],#S2
           [[10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8],
            [13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1],
            [13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7],
            [1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12]],#S3
           [[7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15],
            [13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9],
            [10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4],
            [3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14]],#S4
           [[2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9],
            [14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6],
            [4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14],
            [11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3]],#S5
           [[12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11],
            [10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8],
            [9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6],
            [4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13]],#S6
           [[4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1],
            [13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6],
            [1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2],
            [6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12]],#S7
           [[13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7],
            [1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2],
            [7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8],
            [2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11]]]#S8

# P-置换表
P_table = [15, 6,19,20,28,11,27,16,
            0,14,22,25, 4,17,30, 9,
            1, 7,23,13,31,26, 2, 8,
           18,12,29, 5,21,10, 3,24]

#置换选择表PC-1
PC_1 = [56,48,40,32,24,16, 8,
         0,57,49,41,33,25,17,
         9, 1,58,50,42,34,26,
        18,10, 2,59,51,43,35,
        62,54,46,38,30,22,14,
         6,61,53,45,37,29,21,
        13, 5,60,52,44,36,28,
        20,12, 4,27,19,11, 3]

#置换选择表PC-2
PC_2 = [13,16,10,23, 0, 4, 2,27,
        14, 5,20, 9,22,18,11, 3,
        25, 7,15, 6,26,19,12, 1,
        40,51,30,36,46,54,29,39,
        50,44,32,47,43,48,38,55,
        33,52,45,41,49,35,28,31]

# LS(i)的取值
LS = [1,1,2,2,2,2,2,2,1,2,2,2,2,2,2,1]


# 十六进制转换为二进制
def HexToBin(hex):
    msg = ""
    for char in hex:
        temp = bin(int(char, 16))[2:]
        if len(temp) < 4:
            msg += '0' * (4-len(temp))
        msg += temp
    return msg


# 二进制转换为十六进制
def BinToHex(bin):
    msg = ""
    i = 0
    while(i < len(bin)):
        msg += hex(int(bin[i:i+4], 2))[2:]
        i += 4
    return msg


#异或运算
def xor(str1, str2, n):
    str = ""
    for i in range(n):
        if str1[i] != str2[i]:
            str += '1'
        else:
            str += '0'
    return str


# 子密钥生成器,key_hex为初始密钥(16进制)
def createKey(key_hex):
    key_bin = HexToBin(key_hex)
    PC_1_K = ""
    key_list = []

    #PC-1置换
    for i in range(56):
        PC_1_K += key_bin[PC_1[i]]

    C = PC_1_K[0:28]
    D = PC_1_K[28:56]

    for i in range(0, 16):
        key_i = ""

        #LS(i)左循环移位
        C = C[LS[i]:] + C[:LS[i]]
        D = D[LS[i]:] + D[:LS[i]]

        #PC-2置换
        PC_2_K = C + D
        for j in range(48):
            key_i += PC_2_K[PC_2[j]]

        key_list.append(key_i)

    return key_list


# DES加密函数
def des_encrypt(msg_hex, key_hex):
    msg_bin = HexToBin(msg_hex)

    #子密玥生成器生成子密玥列表
    key_list = createKey(key_hex)

    #IP置换
    ip_k = ""
    for i in range(64):
        ip_k += msg_bin[ip[i]]
    L = ip_k[0: 32]
    R = ip_k[32: 64]

    for i in range(16):

        key_i = key_list[i]

        #E-扩展运算
        E_R = ""
        for j in range(48):
            E_R += R[E_table[j]]

        #密钥与E(R)异或
        K_E_R = xor(key_i, E_R, 48)

        #S-盒运算
        S = ""
        n = 0
        for j in range(8):
            temp = K_E_R[n : n+6]
            s_i= hex(S_table[j][int(temp[0]+temp[5],2)][int(temp[1:5],2)])[2:]
            S += s_i
            n += 6
        S_bin = HexToBin(S)

        #P-置换运算
        P = ""
        for j in range(32):
            P += S_bin[P_table[j]]

        #L与 R异或，L和 R互换
        temp = xor(L, P, 32)
        L = R
        R = temp

    #位置交换
    L, R = R, L

    #初始逆置换
    ciper = ""
    _ip_k = L + R
    for i in range(64):
        ciper += _ip_k[_ip[i]]

    return BinToHex(ciper)


#DES解密函数
def des_decrypt(cpr_hex, key_hex):
    cpr_bin = HexToBin(cpr_hex)

    # 子密玥生成器生成子密玥列表
    key_list = createKey(key_hex)

    # IP置换
    ip_k = ""
    for i in range(64):
        ip_k += cpr_bin[ip[i]]
    L = ip_k[0: 32]
    R = ip_k[32: 64]

    for i in range(16):

        key_i = key_list[15-i]

        # E-扩展运算
        E_R = ""
        for j in range(48):
            E_R += R[E_table[j]]

        # 密钥与E(R)异或
        K_E_R = xor(key_i, E_R, 48)

        # S-盒运算
        S = ""
        n = 0
        for j in range(8):
            temp = K_E_R[n: n + 6]
            s_i = hex(S_table[j][int(temp[0] + temp[5], 2)][int(temp[1:5], 2)])[2:]
            S += s_i
            n += 6
        S_bin = HexToBin(S)

        # P-置换运算
        P = ""
        for j in range(32):
            P += S_bin[P_table[j]]

        # L与 R异或，L和 R互换
        temp = xor(L, P, 32)
        L = R
        R = temp

    # 位置交换
    L, R = R, L

    # 初始逆置换
    msg = ""
    _ip_k = L + R
    for i in range(64):
        msg += _ip_k[_ip[i]]

    return BinToHex(msg)


# ECB加密模式
def ECB_encrypt(msg, key):
    ciper = ""

    while(len(msg) >= 16):
        ciper += des_encrypt(msg[0:16], key)
        msg = msg[16:]

    if len(msg) != 0:
        msg += (16-len(msg)) * '0'
        ciper += des_encrypt(msg, key)
    return ciper


# ECB解密模式
def ECB_decrypt(cpr, key):
    msg = ""
    while(len(cpr) > 0):
        msg += des_decrypt(cpr[0:16], key)
        cpr = cpr[16:]
    return msg
msg=input("输入明文：")
key=input("输入密钥：")
cpr=ECB_encrypt(msg,key)
print("密文为：")
print(cpr)
msg=ECB_decrypt(cpr,key)
print("明文为：")
print(msg)

